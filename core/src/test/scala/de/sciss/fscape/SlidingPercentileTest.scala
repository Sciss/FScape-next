package de.sciss.fscape

object SlidingPercentileTest extends App {
  val g = Graph {
    import graph._

    /*
        size = 3

                     frac = 0.5        |  frac = 0.0   |  frac = 1.0

       5          ->  5        ->  5   ->  5   ->  5   ->  5   ->  5
       5, 10      ->  5 or 10  -> 10   ->  5   ->  5   -> 10   -> 10
       5, 10, 12  -> 10        -> 10   ->  5   ->  5   -> 12   -> 12
       9, 10, 12  -> 10        -> 10   ->  9   ->  9   -> 12   -> 12
       9, 12, 12  -> 12        -> 12   ->  9   ->  9   -> 12   -> 12
       9, 12, 16  -> 12        -> 12   ->  9   ->  9   -> 16   -> 16
      12, 16, 25  -> 16        -> 16   -> 12   -> 12   -> 25   -> 25
      12, 16, 25  -> 16        -> 16   -> 12   -> 12   -> 25   -> 25
      12, 20, 25  -> 20        -> 20   -> 12   -> 12   -> 25   -> 25
      12, 15, 20  -> 15        -> 15   -> 12   -> 12   -> 20   -> 20
      11, 15, 20  -> 15        -> 15   -> 11   -> 11   -> 20   -> 20
      11, 12, 15  -> 12        -> 12   -> 11   -> 11   -> 15   -> 15
      11, 12, 13  -> 12        -> 12   -> 11   -> 11   -> 13   -> 13
      12, 13, 24  -> 13        -> 13   -> 12   -> 12   -> 24   -> 24
      13, 24, 28  -> 24        -> 24   -> 13   -> 13   -> 28   -> 28
      24, 24, 28  -> 24        -> 24   -> 24   -> 24   -> 28   -> 28
       4, 24, 28  -> 24        -> 24   ->  4   ->  4   -> 28   -> 28
       4, 18, 24  -> 18        -> 18   ->  4   ->  4   -> 24   -> 24
       4,  6, 18  ->  6        ->  6   ->  4   ->  4   -> 18   -> 18
       0,  6, 18  ->  6        ->  6   ->  0   ->  0   -> 18   -> 18

     */

    val in = ValueIntSeq(5, 10, 12, 9, 12, 16, 25, 12, 20, 15, 11, 12, 13, 24, 28, 24, 4, 18, 6, 0)

    /*
       size = 5

                              frac = 0.5        |  frac = 0.0   |  frac = 1.0

       5                   ->  5        ->  5   ->  5   ->  5   ->  5   ->  5
       5, 10               ->  5 or 10  -> 10   ->  5   ->  5   -> 10   -> 10
       5, 10, 12           -> 10        -> 10   ->  5   ->  5   -> 12   -> 12
       5,  9, 10, 12       ->  9 or 10  -> 10   ->  5   ->  5   -> 12   -> 12
       5,  9, 10, 12, 12   -> 10        -> 10   ->  5   ->  5   -> 12   -> 12
       9, 10, 12, 12, 16   -> 12        -> 12   ->  9   ->  9   -> 16   -> 16
       9, 12, 12, 16, 25   -> 12        -> 12   ->  9   ->  9   -> 25   -> 25
       9, 12, 12, 16, 25   -> 12        -> 12   ->  9   ->  9   -> 25   -> 25
      12, 12, 16, 20, 25   -> 16        -> 16   -> 12   -> 12   -> 25   -> 25
      12, 15, 16, 20, 25   -> 16        -> 16   -> 12   -> 12   -> 25   -> 25
      11, 12, 15, 20, 25   -> 15        -> 15   -> 11   -> 11   -> 25   -> 25
      11, 12, 12, 15, 20   -> 12        -> 12   -> 11   -> 11   -> 20   -> 20
      11, 12, 13, 15, 20   -> 13        -> 13   -> 11   -> 11   -> 20   -> 20
      11, 12, 13, 15, 24   -> 13        -> 13   -> 11   -> 11   -> 24   -> 24
      11, 12, 13, 24, 28   -> 13        -> 13   -> 11   -> 11   -> 28   -> 28
      12, 13, 24, 24, 28   -> 24        -> 24   -> 12   -> 12   -> 28   -> 28
       4, 13, 24, 24, 28   -> 24        -> 24   ->  4   ->  4   -> 28   -> 28
       4, 18, 24, 24, 28   -> 24        -> 24   ->  4   ->  4   -> 28   -> 28
       4,  6, 18, 24, 28   -> 18        -> 18   ->  4   ->  4   -> 28   -> 28
       0,  4,  6, 18, 24   ->  6        ->  6   ->  0   ->  0   -> 24   -> 24

 */

    val m  = SlidingPercentile(in, size = 5, frac = 0.5)
    RepeatWindow(m).poll(Metro(2), "out")
  }

  stream.Control().run(g)
}
